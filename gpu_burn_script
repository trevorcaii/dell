import subprocess
from datetime import datetime
import time

def execute_shell_command(command):
    try:
        # Execute the shell command
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode == 0:
            # Successful execution
            return result.stdout.decode("utf-8").strip()  # Decode bytes to string
        else:
            # Error occurredhttps://github.com/manunicholasjacob/Testing/blob/main/getbdf2
            return f"Error: {result.stderr.decode('utf-8').strip()}"  # Decode bytes to string
    except Exception as e:
        return f"Error: {str(e)}"


def check_replay(gpu_percentage = 95, burn_time = 3600, gpu_number = 0, gpu_index = [], call_time = 10):
    try:
        print("Starting gpu_burn...")
        # "> /dev/null" will not clutter stdout with gpu_burn's outputs
        gpu_process = subprocess.Popen(['/home/NVIDIA/gpu_burn-1.1/gpu-burn/gpu_burn', '-d', '-m', f"{gpu_percentage}%", f"{burn_time}"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("running in background")
    except Exception as e:
        return f"Error: {str(e)}"

    # Periodically execute another command while './gpu_burn' is running
    replay_count = ""
    while gpu_process.poll() is None:
        now = datetime.now()
        print("Current Timestamp:", now)
        if(len(gpu_index) > 0):
            for index in gpu_index:
                print(f"GPU {index}:")
                replay_count = execute_shell_command(f"nvidia-smi -i {index} -q|grep -i replay")
                replay_count = replay_count.split("\n")
                for line in replay_count: print(line.strip())
        else:
            for i in range(gpu_number):
                print(f"GPU {i}:")
                replay_count = execute_shell_command(f"nvidia-smi -i {i} -q|grep -i replay")
                replay_count = replay_count.split("\n")
                for line in replay_count: print(line.strip())
        print()
        time.sleep(call_time) 

    # 'gpu_burn' has finished; you can perform any cleanup or final actions here
    print("gpu_burn has completed.")
    bdf_read = execute_shell_command("nvidia-smi --query-gpu=pci.bus_id --format=csv,noheader")
    bdf_read = bdf_read.split('\n')
    bdf_read = [":".join(line.split(':')[1:]) for line in bdf_read]
    with open("/home/dell/Desktop/output.txt","w") as file:
        if(len(gpu_index) > 0):
            bdfs = []
            for i, bdf in enumerate(bdf_read):
                if i in gpu_index: bdfs.append(bdf)
            for i, bdf in enumerate(bdfs):
                file.write(f"GPU {gpu_index[i]} - " + bdf + ":\n")
                replay_count = execute_shell_command(f"nvidia-smi -i {gpu_index[i]} -q|grep -i replay")
                replay_count = replay_count.split("\n")
                for line in replay_count: file.write(line.strip() + "\n")
                file.write("\n")
        else:
            for gpu_index_tag, bdf in enumerate(bdf_read): 
                file.write(f"GPU {gpu_index_tag} - " + bdf + ":\n")
                replay_count = execute_shell_command(f"nvidia-smi -i {gpu_index_tag} -q|grep -i replay")
                replay_count = replay_count.split("\n")
                for line in replay_count: file.write(line.strip() + "\n")
                file.write("\n")
    stdout, stderr = gpu_process.communicate()
    with open("/home/dell/Desktop/gpu_burn_output", "w") as file:
        file.write(stdout.decode("utf-8"))
def run_command(command):
    result = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = result.communicate()
    if result.returncode != 0:
        raise Exception(f"Command failed with error: {stderr.decode('utf-8')}")
    return stdout.decode('utf-8')

def get_bdf_list():
    """ Get a list of all BDFs using lspci. """
    output = run_command("lspci")
    bdf_list = [line.split()[0] for line in output.splitlines()]
    return bdf_list

def get_vendor_bdf_list(vendor_id):
    """ Get a list of BDFs for a specific vendor using lspci. """
    output = run_command(f"lspci -d {vendor_id}:")
    vendor_bdf_list = [line.split()[0] for line in output.splitlines()]
    return vendor_bdf_list

def get_header_type(bdf):
    
    header_type = run_command(f"setpci -s {bdf} HEADER_TYPE")
    return header_type.strip()

def get_secondary_bus_number(bdf):
    """ Get the secondary bus number for a given BDF using setpci. """
    secondary_bus_number = run_command(f"setpci -s {bdf} SECONDARY_BUS")
    return secondary_bus_number.strip()

def read_slot_capabilities(bdf):
    try:
        slot_capabilities_output = subprocess.check_output(["setpci", "-s", bdf, "CAP_EXP+0X14.l"])
        return slot_capabilities_output.decode().strip()
    except subprocess.CalledProcessError:
        return None
    
def hex_to_binary(hex_string):
    binary_string = format(int(hex_string, 16), '032b')
    return binary_string

def gpu_traverse_up(gpu_bdf_list):
    all_bdf_list = get_bdf_list()
    header_bdf_list = [bdf for bdf in all_bdf_list if get_header_type(bdf).startswith("01")]
    physical_slot_numbers = []
    for i, gpu_bdf in enumerate(gpu_bdf_list):
        # get the bus for the gpu to compare to secondary bus number
        current_bus = gpu_bdf.split(":")[0]
        port_found = False

        print(f"starting {i} GPU")

        # keep traversing up the tree until a valid physical port number is found
        while(not port_found):
            print(f"current bus: {current_bus}")
            upstream_connection = None
            for bdf in header_bdf_list:
                if get_secondary_bus_number(bdf) == current_bus:
                    upstream_connection = bdf 

            if upstream_connection is None:
                print(f"did not find a port with secondary bus as {current_bus}") 
                break

            else:
                print("Upstream Connection: " + f"{upstream_connection}")
                slot_capabilities = read_slot_capabilities(upstream_connection)
                # Extract the physical slot number from slot capabilities bits [31:19]
                # Convert from hex to binary to decimal
                print(int(slot_capabilities, 16))
                print(bin(int(slot_capabilities,16))[2:])
                print(bin(int(slot_capabilities,16))[-13:])
                slot_number = int((bin(int(slot_capabilities,16))[-13:])[::-1], 2)
                print("slot number: " + f"{slot_number}")
                slot_number = int(hex_to_binary(slot_capabilities), 2)
                print(slot_number)

                print(slot_number)

            if(slot_number in range(21,29)):
                physical_slot_numbers.append(slot_number)
                port_found = True
            else:
                print("valid slot number did not pass")
                current_bus = upstream_connection.split(":")[0]
        
        if(not port_found):
            physical_slot_numbers.append(-1)

    return physical_slot_numbers

def main():
    # check_replay(burn_time=10, gpu_index=[0,2])
    print(gpu_traverse_up(["18:00.0","86:00.0"]))

if __name__ == "__main__":
    main()
