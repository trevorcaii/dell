import subprocess
from datetime import datetime
import time

def execute_shell_command(command):
    try:
        # Execute the shell command
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode == 0:
            # Successful execution
            return result.stdout.decode("utf-8").strip()  # Decode bytes to string
        else:
            # Error occurredhttps://github.com/manunicholasjacob/Testing/blob/main/getbdf2
            return f"Error: {result.stderr.decode('utf-8').strip()}"  # Decode bytes to string
    except Exception as e:
        return f"Error: {str(e)}"


def check_replay(gpu_percentage = 95, burn_time = 3600, gpu_number = 0, gpu_index = [], call_time = 0.5):
    try:
        print("Starting gpu_burn...")
        # "> /dev/null" will not clutter stdout with gpu_burn's outputs
        gpu_process = subprocess.Popen(['/home/NVIDIA/gpu_burn-1.1/gpu-burn/gpu_burn', '-d', '-m', f"{gpu_percentage}%", f"{burn_time}"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("running in background")
    except Exception as e:
        return f"Error: {str(e)}"

    # Periodically execute another command while './gpu_burn' is running
    replay_count = ""
    while gpu_process.poll() is None:
        now = datetime.now()
        print("Current Timestamp:", now)
        if(len(gpu_index) > 0):
            for index in gpu_index:
                print(f"GPU {index}:")
                replay_count = execute_shell_command(f"nvidia-smi -i {index} -q|grep -i replay")
                replay_count = replay_count.split("\n")
                for line in replay_count: print(line.strip())
        else:
            for i in range(gpu_number):
                print(f"GPU {i}:")
                replay_count = execute_shell_command(f"nvidia-smi -i {i} -q|grep -i replay")
                replay_count = replay_count.split("\n")
                for line in replay_count: print(line.strip())
        print()
        time.sleep(call_time) 

    # 'gpu_burn' has finished; you can perform any cleanup or final actions here
    print("gpu_burn has completed.")
    bdf_read = execute_shell_command("nvidia-smi --query-gpu=pci.bus_id --format=csv,noheader")
    bdf_read = bdf_read.split('\n')
    bdf_read = [":".join(line.split(':')[1:]) for line in bdf_read]
    with open("/home/dell/Desktop/output.txt","w") as file:
        if(len(gpu_index) > 0):
            for i, bdf in enumerate(bdf_read[gpu_index]):
                file.write(f"GPU {gpu_index[i]} - " + bdf + ":\n")
                replay_count = execute_shell_command(f"nvidia-smi -i {gpu_index[i]} -q|grep -i replay")
                replay_count = replay_count.split("\n")
                for line in replay_count: file.write(line.strip() + "\n")
                file.write("\n")
        else:
            for gpu_index_tag, bdf in enumerate(bdf_read): 
                file.write(f"GPU {gpu_index_tag} - " + bdf + ":\n")
                replay_count = execute_shell_command(f"nvidia-smi -i {gpu_index_tag} -q|grep -i replay")
                replay_count = replay_count.split("\n")
                for line in replay_count: file.write(line.strip() + "\n")
                file.write("\n")
    stdout, stderr = gpu_process.communicate()
    with open("/home/dell/Desktop/gpu_burn_output", "w") as file:
        file.write(stdout.decode("utf-8"))

def main():
    check_replay(burn_time=10, gpu_index=[0,2])

if __name__ == "__main__":
    main()
