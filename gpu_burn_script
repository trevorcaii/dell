import subprocess
import time

def execute_shell_command(command):
    try:
        # Execute the shell command
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            # Successful execution
            return result
        else:
            return f"Error: {result}"
    except Exception as e:
        return f"Error: {str(e)}"

def check_replay(gpu_number = 0, gpu_index = -1, call_time = 0.5):
    
    if(gpu_index != -1):
        # "> /dev/null" will not clutter stdout with gpu_burn's outputs
        print("found gpuindex")
        nvidia_smi_congif = "echo -e \"GPU {gpu_index}: \n$(nvidia-smi -i {gpu_index} -q|grep -i replay)\""
    else:
        print("no gpuindex")
        nvidia_smi_congif = "for i in {{0..{gpu_number}}}; do echo -e \"GPU $i: \n$(nvidia-smi -i $i -q|grep -i replay)\""
    try:
        print("starting gpu_burn")
        gpu_process = subprocess.Popen(['./gpu_burn', '>', '/dev/null'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("running in background")
    except Exception as e:
        return f"Error: {str(e)}"

    # Periodically execute another command while './gpu_burn' is running
    while gpu_process.poll() is None:
        replay_count = execute_shell_command(nvidia_smi_congif)
        print(replay_count)
        time.sleep(call_time) 

    # 'gpu_burn' has finished; you can perform any cleanup or final actions here
    print("gpu_burn has completed.")

def main():
    check_replay(gpu_number=4)

if __name__ == "__main__":
    main()
